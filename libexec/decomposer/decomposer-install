#!/usr/bin/env bash

DECOMPOSER_TARGET_DIR=${DECOMPOSER_TARGET_DIR:-/var/www/libs/}

INCLUDE_OUTDATED_CHECK=1
INSTALL_DEV_DEPENDENCIES=1

parse_arguments() {
  while [ "$#" -gt 0 ]; do
    case "$1" in
      "--no-dev")
        INCLUDE_OUTDATED_CHECK=0
        INSTALL_DEV_DEPENDENCIES=0
        ;;
      *)
        printf "Unknown option %s\n" "$1"
        if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
          shift
        fi
        ;;
    esac
    shift
  done
}

validate_arguments() {
  if ! [ -f "${CWD}/decomposer.json" ]; then
    exit_error 'No decomposer.json found.'
  fi

  if ! [ -d "${DECOMPOSER_TARGET_DIR}" ] || ! [ -w "${DECOMPOSER_TARGET_DIR}" ]; then
    exit_error "DECOMPOSER_TARGET_DIR '${DECOMPOSER_TARGET_DIR}' is not a writable directory."
  fi
}

install_library() {
  local name="$1"
  local object="$2"
  local status_text_variable="$3"

  local dev

  dev=$( jq -r '."development-only"' <<< "${object}" )

  if [ "$dev" = "true" ] && [ $INSTALL_DEV_DEPENDENCIES = 0 ]; then
    printf -v "${status_text_variable}" 'development-only dependency'
    return 2
  fi

  local url version library_target_dir

  url=$( jq -r '.url' <<< "${object}" )
  version=$( jq -r '.version' <<< "${object}" )

  library_target_dir=$( jq -r '."target-dir"' <<< "${object}" )
  if [ "${library_target_dir}" = "null" ]; then
    library_target_dir="${name}-${version}"
  else
    library_target_dir="${name}-${version}${library_target_dir}"
  fi

  cd "${DECOMPOSER_TARGET_DIR}" || return 2

  if ! [ -d "${name}-${version}" ]; then
    if ! git clone "${url}" "${library_target_dir}" &> /dev/null; then
      printf -v "${status_text_variable}" 'cloning git repository failed'
      return 1
    fi

    local just_cloned=1
  fi

  if [ -h "${name}-${version}" ]; then
    printf -v "${status_text_variable}" 'symlink'
    return 2
  elif [ -f "${library_target_dir}/.git" ]; then
    printf -v "${status_text_variable}" 'git worktree'
    return 2
  elif ! [ -d "${library_target_dir}/.git" ]; then
    printf -v "${status_text_variable}" 'not a git repository'
    return 2
  fi

  cd "${library_target_dir}" || return 2

  local revision revision_type revision_alt_type revision_reset default_remote

  revision=$( jq -r '.revision' <<< "${object}" )
  if [ "${revision}" = "null" ]; then
    revision="${version}"
  fi

  revision_type=$( git cat-file -t "${revision}" 2> /dev/null )
  revision_alt_type=$( git cat-file -t "v${revision}" 2> /dev/null )
  revision_reset=

  # use the origin for master as the default origin
  # TODO: determine the default remote
  default_remote="origin"
  if git remote get-url "$default_remote" | grep -q "${url}"; then
    printf -v "${status_text_variable}" 'remote URL has changed'
    git remote set-url "$default_remote" "${url}"
  fi

  if git branch -a | grep -q "/${default_remote}/${revision}"; then
    revision_reset="${default_remote}/${revision}"
  elif [ "${revision_type}" = 'commit' ] || [ "${revision_type}" = 'tag' ]; then
    revision_reset="${revision}"
  elif [ "${revision_alt_type}" = 'commit' ] || [ "${revision_alt_type}" = 'tag' ]; then
    revision_reset="v${revision}"
  fi

  if [ -z "${just_cloned}" ] && [ "${revision_reset}" = "${default_remote}/${revision}" ] || [ -z "${revision_reset}" ]; then
    # no need to fetch changes if we just cloned the repository
    # or we can already resolve a commit or tag
    if ! git fetch ${default_remote} &> /dev/null; then
      printf -v "${status_text_variable}" 'fetching changes failed'
      return 1
    fi
  fi

  if [ -z "$revision_reset" ]; then
    revision_type=$( git cat-file -t "${revision}" 2> /dev/null )
    revision_alt_type=$( git cat-file -t "v${revision}" 2> /dev/null )
    revision_reset=

    if git branch -a | grep -q "/${default_remote}/${revision}"; then
      revision_reset="${default_remote}/${revision}"
    elif [ "${revision_type}" = 'commit' ] || [ "${revision_type}" = 'tag' ]; then
      revision_reset="${revision}"
    elif [ "${revision_alt_type}" = 'commit' ] || [ "${revision_alt_type}" = 'tag' ]; then
      revision_reset="v${revision}"
    fi
  fi

  if [ -z "${revision_reset}" ]; then
    printf -v "${status_text_variable}" "revision '%s' not found" "${revision}"
    return 1
  fi

  if [ "$( git rev-parse HEAD )" = "$( git rev-parse "${revision_reset}^{commit}" )" ]; then
    # do not reset local modifications to correct revision
    return 0
  fi

  if ! git reset --hard "${revision_reset}" &> /dev/null; then
    printf -v "${status_text_variable}" 'resetting changes failed'
    return 1
  fi
}

create_library_autoload() {
  local name="$1"
  local object="$2"

  local dev

  dev=$( jq -r '."development-only"' <<< "${object}" )

  if [ "$dev" = "true" ] && [ $INSTALL_DEV_DEPENDENCIES = 0 ]; then
    return 2
  fi

  local version library_target_dir

  version=$( jq -r '.version' <<< "${object}" )

  library_target_dir=$( jq -r '."target-dir"' <<< "${object}" )
  if [ "${library_target_dir}" = "null" ]; then
    library_target_dir="${name}-${version}"
  else
    library_target_dir="${name}-${version}${library_target_dir}"
  fi

  cd "${DECOMPOSER_TARGET_DIR}" || return 1

  local psr0_path psr4_prefix psr4_path

  if [ "$( jq 'has("psr0")' <<< "${object}" )" = 'true' ]; then
    psr0_path=$( jq -r '.psr0.path' <<< "${object}" )

    cat << EOF > "${name}-${version}.php"
<?php

set_include_path(
    get_include_path() . ':' .
    __DIR__ . '/${name}-${version}${psr0_path}'
);

?>
EOF
  elif [ "$( jq 'has("psr4")' <<< "${object}" )" = 'true' ]; then
    if [ "$( jq -r '.psr4|type' <<< "${object}" )" = 'object' ]; then
      psr4_prefix=$( jq -r '.psr4.prefix' <<< "${object}" )
      psr4_path=$( jq -r '.psr4."search-path"' <<< "${object}" )

    cat << EOF > "${name}-${version}.php"
<?php

autoload_register_psr4_prefix('${psr4_prefix}', '${name}-${version}${psr4_path}');

?>
EOF
    else
      printf '<?php\n\n' > "${name}-${version}.php"

      for psr4_config in $( jq -c '.psr4[]' <<< "${object}" ); do
        psr4_prefix=$( jq -r '.prefix' <<< "${psr4_config}" )
        psr4_path=$( jq -r '."search-path"' <<< "${psr4_config}" )
        echo "autoload_register_psr4_prefix('${psr4_prefix}', '${name}-${version}${psr4_path}');" \
          >> "${name}-${version}.php"
      done

      printf '\n?>' >> "${name}-${version}.php"
    fi
  fi
}

process_file() {
  local file="$1"

  map_libraries_object "${file}" process_library
}

process_library() {
  local name="$1"
  local object="$2"

  local status_text

  printf 'Installing %s...' "${name}"

  install_library "${name}" "${object}" status_text

  case "$?" in
    0) printf 'done\n' ;;
    1) printf 'failed (%s)\n' "${status_text}" ;;
    2) printf 'skipped (%s)\n' "${status_text}" ;;
  esac

  create_library_autoload "${name}" "${object}"
}

md5checksum() {
  local file="$1"

  if command -v 'md5sum' >/dev/null; then
    md5sum "${file}" | cut -f1 -d' '
  elif command -v 'md5' >/dev/null; then
    md5 -q "${file}"
  fi
}

create_project_autoload() {
  local file="$1"

  local md5

  {
    printf '<?php\n\n'

    if [ "${INCLUDE_OUTDATED_CHECK}" == 1 ]; then
      md5=$( md5checksum "${CWD}/decomposer.json" )

      cat << EOF
if (md5_file(__DIR__ . '/decomposer.json') != '${md5}')
{
    die("Decomposer autoload file is outdated. Please re-run 'decomposer install'");
}

EOF
     fi

    map_libraries_object "${file}" print_library_require

    printf '\n?>\n'
  } > "${CWD}/decomposer.autoload.inc.php"
}

print_library_require() {
  local name="$1"
  local object="$2"

  version=$( jq -r '.version' <<< "${object}" )
  printf "require_once '%s-%s.php';\\n" "${name}" "${version}"
}

parse_arguments "$@"
validate_arguments

process_file "${CWD}/decomposer.json"
create_project_autoload "${CWD}/decomposer.json"
